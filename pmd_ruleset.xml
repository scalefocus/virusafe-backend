<?xml version="1.0"?>

<ruleset name="All Java Rules"
         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 https://pmd.sourceforge.io/ruleset_2_0_0.xsd">
    <description>Every Java Rule in PMD</description>


    <!-- Lexer test cases - wrong encoding, illegal characters, ... -->
    <exclude-pattern>.*/ant/java/EncodingTestClass.java</exclude-pattern>
    <exclude-pattern>.*/net/sourceforge/pmd/cpd/badandgood/BadFile.java</exclude-pattern>

    <!-- the following files produce parsing errors with java 9, as they use identifiers, that
         are now reserved keywords and are forbidden to be used as identifiers.
    -->
    <exclude-pattern>.*/net/sourceforge/pmd/lang/java/ast/jdkversiontests/assert_test5.java</exclude-pattern>
    <exclude-pattern>.*/net/sourceforge/pmd/lang/java/ast/jdkversiontests/assert_test5_a.java</exclude-pattern>
    <exclude-pattern>.*/net/sourceforge/pmd/lang/java/ast/jdkversiontests/assert_test7.java</exclude-pattern>
    <exclude-pattern>.*/net/sourceforge/pmd/lang/java/ast/jdkversiontests/jdk14_enum.java</exclude-pattern>
    <exclude-pattern>.*/net/sourceforge/pmd/lang/java/ast/jdkversiontests/jdk9_invalid_identifier.java</exclude-pattern>
    <exclude-pattern>
        .*/net/sourceforge/pmd/lang/java/ast/jdkversiontests/java10/LocalVariableTypeInference_varAsAnnotationName.java
    </exclude-pattern>
    <exclude-pattern>
        .*/net/sourceforge/pmd/lang/java/ast/jdkversiontests/java10/LocalVariableTypeInference_varAsEnumName.java
    </exclude-pattern>
    <exclude-pattern>
        .*/net/sourceforge/pmd/lang/java/ast/jdkversiontests/java10/LocalVariableTypeInference_varAsTypeIdentifier.java
    </exclude-pattern>

    <rule ref="category/java/bestpractices.xml">
        <exclude name="AccessorClassGeneration"/>
        <exclude name="AbstractClassWithoutAbstractMethod"/>
    </rule>
    <rule ref="category/java/codestyle.xml">
        <exclude name="LongVariable"/>
        <exclude name="AtLeastOneConstructor"/>
        <exclude name="ShortVariable"/>
        <exclude name="CallSuperInConstructor"/>
        <exclude name="OnlyOneReturn"/>
        <exclude name="LocalVariableCouldBeFinal"/>
        <exclude name="UnnecessaryAnnotationValueElement"/>
    </rule>
    <rule ref="category/java/codestyle.xml/ClassNamingConventions">
        <properties>
            <property name="utilityClassPattern" value="[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)"/>
        </properties>
    </rule>

    <rule ref="category/java/codestyle.xml/TooManyStaticImports">
        <properties>
            <property name="maximumStaticImports" value="5"/>
        </properties>
    </rule>
    <rule ref="category/java/codestyle.xml/ShortClassName">
        <properties>
            <property name="minimum" value="4"/>
        </properties>
    </rule>
    <rule ref="category/java/codestyle.xml/MethodNamingConventions">
        <properties>
            <!--Ignore MethodNamingConventions on classes where the class name ends with Repository-->
            <property name="violationSuppressXPath" value="//ClassOrInterfaceDeclaration['.*Repository']"/>
        </properties>
    </rule>


    <rule ref="category/java/design.xml">
        <exclude name="LawOfDemeter"/>
        <exclude name="DataClass"/>
        <exclude name="AvoidUncheckedExceptionsInSignatures"/>
        <exclude name="AbstractClassWithoutAnyMethod"/>
        <exclude name="TooManyFields"/>
        <exclude name="ExcessiveParameterList"/>
        <exclude name="ExcessiveImports"/>
        <exclude name="AvoidCatchingGenericException"/>
        <exclude name="TooManyMethods"/>
    </rule>

    <rule ref="category/java/design.xml/SignatureDeclareThrowsException">
        <properties>
            <property name="IgnoreJUnitCompletely" value="true"/>
        </properties>
    </rule>

    <rule ref="category/java/design.xml/LoosePackageCoupling">
        <properties>
            <property name="packages">
                <value>io.virusafe</value>
            </property>
        </properties>
    </rule>

    <rule ref="category/java/documentation.xml">
        <exclude name="CommentRequired"/>
        <exclude name="CommentSize"/>
    </rule>
    <rule ref="category/java/documentation.xml/CommentRequired">
        <properties>
            <property name="methodWithOverrideCommentRequirement" value="Ignored"/>
            <property name="accessorCommentRequirement" value="Ignored"/>
            <property name="classCommentRequirement" value="Ignored"/>
            <property name="fieldCommentRequirement" value="Ignored"/>
            <property name="publicMethodCommentRequirement" value="Required"/>
            <property name="protectedMethodCommentRequirement" value="Required"/>
            <property name="enumCommentRequirement" value="Required"/>
            <property name="serialVersionUIDCommentRequired" value="Ignored"/>
        </properties>
    </rule>

    <rule ref="category/java/errorprone.xml">
        <exclude name="BeanMembersShouldSerialize"/>
        <exclude name="DataflowAnomalyAnalysis"/>
        <exclude name="MissingStaticMethodInNonInstantiatableClass"/>
        <exclude name="MissingSerialVersionUID"/>
    </rule>

    <rule ref="category/java/errorprone.xml/AvoidDuplicateLiterals">
        <properties>
            <!--Ignore AvoidDuplicateLiterals on classes where the class name ends with Model-->
            <property name="violationSuppressXPath" value="//ClassOrInterfaceDeclaration['.*Model']"/>
        </properties>
    </rule>
    <rule ref="category/java/multithreading.xml">
        <exclude name="AvoidSynchronizedAtMethodLevel"/>
    </rule>
    <rule ref="category/java/performance.xml">
        <exclude name="InsufficientStringBufferDeclaration"/>
    </rule>

    <rule ref="category/java/security.xml"/>

</ruleset>